/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mkononen' at '24/10/16 2:30 PM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.7.0'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id "edu.sc.seis.launch4j" version "1.6.2"
}

launch4j {
    mainClassName = 'main.Main'
}

apply plugin: 'application'
mainClassName = 'main.Main'

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the JaCoCo plugin to provide code coverage for our Java code
apply plugin: "jacoco"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile group: 'junit', name: 'junit', version: '4.+'

    // Add TestFX
    testCompile group: 'org.testfx', name: 'testfx-junit', version:'4.+'

    // Add a testing Mr.Robot that will allow the UI to be tested headlessly
    testRuntime 'org.testfx:openjfx-monocle:1.8.0_20'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/main')
        })
    }
}

check.dependsOn jacocoTestReport

apply plugin: 'javafx-gradle-plugin'

jfx {
    mainClass = 'main.Main'
    vendor = 'Michal Kononenko'
}

test {
    systemProperty 'Dtestfx.robot', 'glass'
    systemProperty 'Dglass.platform', 'Monocle'
    systemProperty 'Dmonocle.platform', 'Headless'
    systemProperty 'Dprism.order', 'sw'
}
